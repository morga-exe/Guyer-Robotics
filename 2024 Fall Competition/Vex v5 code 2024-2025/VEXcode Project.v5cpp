{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma config(Sensor, dgtl1,  irRight,        sensorDigitalIn)\n#pragma config(Sensor, dgtl9,  irLeft,         sensorDigitalIn)\n#pragma config(Motor,  port2,           leftMotor,     tmotorServoContinuousRotation, openLoop)\n#pragma config(Motor,  port3,           rightMotor,    tmotorServoContinuousRotation, openLoop)\n#pragma config(Motor,  port4,           armRotate,     tmotorServoContinuousRotation, openLoop, reversed)\n#pragma config(Motor,  port5,           armPulley,     tmotorServoContinuousRotation, openLoop)\n#pragma config(Motor,  port6,           leftClawServo, tmotorServoStandard, openLoop)\n#pragma config(Motor,  port7,           rightClawServo, tmotorServoStandard, openLoop)\n#pragma config(Motor,  port8,           brainCatcher,  tmotorServoStandard, openLoop)\n//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//\n\n\n//used to set the speed of each wheel \nvoid motorSideSpeed(float motorSide, float motorSpeed)\n{\n\tif(abs(motorSpeed) > 10)\n\t{\n\t\tmotor[motorSide] = motorSpeed;\n\t}\n\telse\n\t{\n\t\tmotor[motorSide] = 0;\n\t}\n}\n\n\n//task main defines all variables the runs the input/output loop\ntask main() {\n\n\t//wait .05 seconds to make sure everything loads ok\n\twait1Msec(50);\n\n\t//set both claws and the brain catcher in the closed position to start\n\tmotor[rightClawServo] = 0; \n\tmotor[leftClawServo] = 127;\n\tmotor[brainCatcher] = -60;\t\n\n\t//defines variables that regulate the steering of the wheels (lines 55 to 75)\n\tfloat static leftVelocity = 0;\n\tfloat static rightVelocity = 0;\n\tint static forwardVelocity = 0;\n\n\t//defines variables for switch function for the claws/brain catcher\n\tint static leftClawSwitch = 0; //lines 110 to 125\n\tint static rightClawSwitch = 0; //lines 127 to 142\n\tint static brainCatcherSwitch = 0; //lines 145 to 160\n\n\t//defines variables used for autonomous mode\n\tint static autonomous = 0; //used to start autonomous (lines xx to xx)\n\tfloat static autoMotorLeft = 0; //used for left wheel velocity (lines xx to xx)\n\tfloat static autoMotorRight = 0; //used for right wheel velocity (lines xx to xx)\n\n\t//infinite loop (temporary: \"takes in and spits out values in real time\")\n\twhile(true) {\n\n\t\t//makes acceleration positive on button press\n\t\tif(vexRT[Btn5U] == 1) {\n\t\t\tif(forwardVelocity > -100) {\n\t\t\t\tforwardVelocity -= 3;\n\t\t\t\twait1Msec(30);\n\t\t\t}\n\t\t}\n\n\t\t//makes acceleration negative on button press\n\t\tif(vexRT[Btn6U] == 1) {\n\t\t\tif(forwardVelocity < 100) {\n\t\t\t\tforwardVelocity += 3;\n\t\t\t\twait1Msec(30);\n\t\t\t}\n\t\t} //(temporary: changed the last three statements from \"if, else if, else\" to increase and add functionality)\n\n\t\t//sets velocity to zero when neither button is pressed\n\t\tif(vexRT[Btn5U] == 0 && vexRT[Btn6U] == 0) {\n\t\t\tforwardVelocity = 0;\n\t\t}\n\n\t\t//sets the velocity for each wheel based on inputs(temporary: \"because operations cannot be performed inside the parameters of a void function\")\n\t\tleftVelocity = forwardVelocity + vexRT[Ch1];\n\t\trightVelocity = forwardVelocity - vexRT[Ch1];\n\n\t\t//calls void function to set the velocity of each wheel\n\t\tmotorSideSpeed(leftMotor, leftVelocity);\n\t\tmotorSideSpeed(rightMotor, rightVelocity);\n\n\n\t\t//makes the base of the arm rotate on button press\n\t\tif(vexRT[Btn6D] == 1) {\n\t\t\tmotor[armRotate] = 40;\n\t\t}\n\t\telse if(vexRT[Btn5D] == 1) {\n\t\t\tmotor[armRotate] = -40;\n\t\t}\n\t\telse {\n\t\t\tmotor[armRotate] = 0;\n\t\t}\n\n\t\t//moves arms up and down via pulley on button press\n\t\tif(vexRT[Btn8U] == 1)\n\t\t{\n\t\t\tmotor[armPulley] = 60;\n\t\t}\n\t\telse if(vexRT[Btn8D] == 1)\n\t\t{\n\t\t\tmotor[armPulley] = -60;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmotor[armPulley] = 0;\n\t\t}\n\n\n\t\t//alternates opening and closing of left claw on button press\n\t\tswitch(leftClawSwitch) {\n\t\tcase 0:\n\t\t\tif(vexRT[Btn8L] == 1) {\n\t\t\t\tleftClawSwitch = 1;\n\t\t\t\tmotor[leftClawServo] = 0;\n\t\t\t\twait1Msec(500); }\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tif(vexRT[Btn8L] == 1) {\n\t\t\t\tleftClawSwitch = 0;\n\t\t\t\tmotor[leftClawServo] = 127;\n\t\t\t\twait1Msec(500);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t//alternates opening and closing of right claw on button press\n\t\tswitch(rightClawSwitch) {\n\t\tcase 0:\n\t\t\tif(vexRT[Btn8R] == 1) {\n\t\t\t\trightClawSwitch = 1;\n\t\t\t\tmotor[rightClawServo] = 127;\n\t\t\t\twait1Msec(500); }\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tif(vexRT[Btn8R] == 1) {\n\t\t\t\trightClawSwitch = 0;\n\t\t\t\tmotor[rightClawServo] = 0;\n\t\t\t\twait1Msec(500);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\n\t\t//lowers and raises brain catcher on button press\n\t\tswitch(brainCatcherSwitch) {\n\t\tcase 0:\n\t\t\tif(vexRT[Btn7R] == 1) {\n\t\t\t\tbrainCatcherSwitch = 1;\n\t\t\t\tmotor[brainCatcher] = 20;\n\t\t\t\twait1Msec(500); }\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tif(vexRT[Btn7R] == 1) {\n\t\t\t\tbrainCatcherSwitch = 0;\n\t\t\t\tmotor[brainCatcher] = 127;\n\t\t\t\twait1Msec(500);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\t\n\n\n\t\t//starts autonomous mode\n\t\tif(vexRT[Btn7L] == 1) {\n\t\t\tautonomous = 1;\n\t\t}\n\n\t\t//autonomous mode loop\n\t\twhile(autonomous == 1) {\n\t\t\tif(SensorValue[dgtl9] == SensorValue[dgtl1]) {\n\t\t\t\tautoMotorLeft = -30;\n\t\t\t\tautoMotorRight = -30;\n\t\t\t}\n\t\t\telse if(SensorValue[dgtl9] == 0 && SensorValue[dgtl1] == 1) {\n\t\t\t\tautoMotorLeft = -30;\n\t\t\t\tautoMotorRight += 3;\n\t\t\t\twait1Msec(10);\n\t\t\t}\n\t\t\telse if(SensorValue[dgtl9] == 1 && SensorValue[dgtl1] == 0) {\n\t\t\t\tautoMotorLeft += 3;\n\t\t\t\tautoMotorRight = -30;\n\t\t\t\twait1Msec(10);\n\t\t\t}\n\n\t\t\tmotor[leftMotor] = autoMotorLeft;\n\t\t\tmotor[rightMotor] = autoMotorRight;\n\n\t\t\t//ends autonomous mode\n\t\t\tif(vexRT[Btn7L] == 1) {\n\t\t\t\tautonomous = 0;\n\t\t\t}\n\n\t\t}\n\t}\n}\n\n\n","textLanguage":"cpp","robotConfig":[],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.3","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}